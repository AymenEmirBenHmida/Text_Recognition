// ignore_for_file: deprecated_member_use
//@dart=2.9

import 'package:firebase_ml_vision/firebase_ml_vision.dart';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'flow_page.dart';

import 'result_ocr.dart';

class SecondPage extends StatefulWidget {
  const SecondPage({Key key}) : super(key: key);

  @override
  _SecondPageState createState() => _SecondPageState();
}

String _text = "";
PickedFile _image;
final picker = ImagePicker();

class _SecondPageState extends State<SecondPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      //floatingActionButton:FloatingActionButton(onPressed:() {Navigator.of(context).push(MaterialPageRoute(builder: (context)=>FlowMenu() ));},child: Text("flow"),),
      appBar: AppBar(
        backgroundColor: Colors.red.withOpacity(0.3),
        title: Text("Text Recognition"),
        actions: [
          FlatButton.icon(
              onPressed: () {
                getImageCamera();
                setState(() {
                  _image = _image;
                });
              },
              icon: Icon(Icons.camera_alt_outlined),
              label: Text("Camera")),
          FlatButton.icon(
              onPressed: () {
                OcrMethod(context);
              },
              icon: Icon(Icons.scanner_outlined),
              label: Text("Scan")),
          FlatButton.icon(
              onPressed: () {
                getimage();
                setState(() {
                  _image = _image;
                });
              },
              icon: Icon(Icons.image_outlined),
              label: Text("pick image"))
        ],
      ),
      body: Stack(children: [
        Container(
          height: double.infinity,
          width: double.infinity,
          child: _image != null ? Image.file(File(_image.path)) : Container(),
        ),
        Padding(
          child: Align(
            alignment: Alignment.bottomRight,
            child: FlowMenu(),
          ),
          padding: EdgeInsets.all(20),
        )
      ]),
    );
  }
}

OcrMethod(context) async {
  showDialog(
      context: context,
      builder: (_) => Center(
            child: CircularProgressIndicator(),
          ));
  final FirebaseVisionImage visionImage =
      FirebaseVisionImage.fromFile(File(_image.path));
  final TextRecognizer Recognized = FirebaseVision.instance.textRecognizer();
  var i = 0;
  final VisionText visionText = await Recognized.processImage(visionImage);
  _text = '';
  for (var text in visionText.blocks) {
    for (TextLine Line in text.lines) {
      _text += Line.text + "\n";
      // i++;
      // print(_text + " this is the text gotten :: " + i.toString());
    }
  }
  
  Navigator.of(context).pop();
  Navigator.of(context)
      .push(MaterialPageRoute(builder: (context) => Result(_text)));
}

getimage() async {
  final pickedFile = await picker.getImage(source: ImageSource.gallery);

  if (pickedFile != null) {
    _image = pickedFile;
  } else {
    print("No image selected");
  }

  /*final FirebaseVisionImage visionImage =
        FirebaseVisionImage.fromFile(File(_image.path));
    final TextRecognizer Recognized = FirebaseVision.instance.textRecognizer();
    var i = 0;
    final VisionText visionText = await Recognized.processImage(visionImage);
    for (var text in visionText.blocks) {
      for (TextLine Line in text.lines) {
        _text += Line.text + "\n";
        i++;
        print(Line.text + " this is the text gotten :: " + i.toString());
      }
    }*/
}

getImageCamera() async {
  final pickedImage = await picker.getImage(source: ImageSource.camera);

  if (pickedImage != null) {
    _image = pickedImage;
  } else {
    print("No image selected");
  }
}

////////////////////////////////////////
///
///
/// Flutter code sample for Flow

// This example uses the [Flow] widget to create a menu that opens and closes
// as it is interacted with, shown above. The color of the button in the menu
// changes to indicate which one has been selected.

class FlowMenu extends StatefulWidget {
  FlowMenu({Key key}) : super(key: key);

  @override
  State<FlowMenu> createState() => _FlowMenuState();
}

class _FlowMenuState extends State<FlowMenu>
    with SingleTickerProviderStateMixin {
  AnimationController menuAnimation;
  IconData lastTapped = Icons.notifications;
  final List<IconData> menuItems = <IconData>[
    Icons.menu,
    Icons.camera_alt_outlined,
    Icons.drive_file_move_outlined,
  ];

  void _updateMenu(IconData icon) {
    if (icon != Icons.menu) {
      setState(() => lastTapped = icon);
    }

    if (icon == Icons.camera_alt_outlined) {
      getImageCamera();
    }

     if (icon == Icons.drive_file_move_outlined) {
      getimage();
    }


  }

  getIcon() {
    return lastTapped;
  }

  @override
  void initState() {
    super.initState();
    menuAnimation = AnimationController(
      duration: const Duration(milliseconds: 250),
      vsync: this,
    );
  }

  Widget flowMenuItem(IconData icon) {
    final double buttonDiameter = 35.0;
    return RawMaterialButton(
      fillColor: lastTapped == icon ? Colors.amber[700] : Colors.blue,
      splashColor: Colors.amber[100],
      shape: const CircleBorder(),
      constraints: BoxConstraints.tight(Size(buttonDiameter, buttonDiameter)),
      onPressed: () {
        _updateMenu(icon);
        menuAnimation.status == AnimationStatus.completed
            ? menuAnimation.reverse()
            : menuAnimation.forward();
      },
      child: Icon(
        icon,
        color: Colors.white,
        size: 35.0,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Flow(
      delegate: FlowMenuDelegate(menuAnimation: menuAnimation),
      children:
          menuItems.map<Widget>((IconData icon) => flowMenuItem(icon)).toList(),
    );
  }
}

class FlowMenuDelegate extends FlowDelegate {
  FlowMenuDelegate({this.menuAnimation}) : super(repaint: menuAnimation);

  final Animation<double> menuAnimation;

  @override
  bool shouldRepaint(FlowMenuDelegate oldDelegate) {
    return menuAnimation != oldDelegate.menuAnimation;
  }

  @override
  void paintChildren(FlowPaintingContext context) {
    final size = context.size;

    final xStart = size.width - 45;

    final yStart = size.height - 45;
    final margin = 8;

    for (int i = context.childCount - 1; i >= 0; i--) {
      final childSize = context.getChildSize(i).width;
      final dx = (childSize + margin) * i;
      final x = xStart - dx * menuAnimation.value;
      final y = yStart - dx * menuAnimation.value;
      context.paintChild(
        i,
        transform: Matrix4.translationValues(
          x,
          y,
          0,
        ),
      );
    }
  }
}
